package com.ls.design.bridge;

/**
 * 什么时候用桥接模式？ 如不同颜色和字体的文字，不同颜色和形状的图形，不同性别和职业的男女等，这类n*m的问题。
 * 定义： 将抽象与现实分离，使它们可以单独变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。
 * 优点：
 *      1. 由于抽象和实现分离，所以扩展能力强
 *      2. 其实现细节对客户透明
 * 缺点：
 *      由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计和编程，这增加了系统的理解和设计难度。
 * 主要角色：
 *      1. 抽象化角色(Abstraction): 定义抽象类，并包含一个对实现化现象的引用
 *      2. 扩展抽象化角色(Refined Abstraction): 是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。
 *      3. 实现化角色(Implementor): 定义实现化角色的接口，供扩展抽象化角色调用
 *      4. 具体实现化角色(Concrete Implementor): 给出实现化角色
 *
 * 样例： 分析皮包有很多，可以按用途分，按颜色分，按品牌分，按大小分等。本例选择用途分(钱包，挎包)，按颜色分(黄色，红色)这两个维度。
 *
 * 适用场景：
 *     1. 当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。
 *     2. 当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时
 *     3. 当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时
 * @date: 2019年08月09日
 * @author: leslie.zhang
 */
public class BridgeTest {

    public static void main(String[] args) {
        Color color = new Yellow();
        Bag bag = new Wallet();
        bag.setColor(color);
        System.out.println(bag.getName());
    }
}
